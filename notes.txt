


Need a lot more functionality on how to use this data structure:
1.Accessing and updating variables all the way up to the top-most function scope. CORRECTION: not just the top most function scope, but also propagating to higher functions if the variable type is pass-by-reference, propagating function needs to check if parent function passed in a constant or not
Only propagate to higher functions, if this is top-level scope and variable type is reference variable and the parent didn't pass a constant for this argument

The way we pass values in arguments in the funccall statements (and also information on whether these are constants) is by appending a list of tuples at the end of the inner list of the data structure containing the data for each function
Every time we return from the function call, we pop the whole list of tuples, every time we call a new function, we append a new list of tuples


1.1.A function that for every scope updates a certain variable, up until the most recent point where that variable was declared (behaviour is slightly different depending on whether or not there is shadowing)

1.2.The propagating function must start from the existing state of the current scope





Need a function to propagate result from one function to the calling function
1.If it is a result variable
2.And for some other reasons





Need a propagating function for propagating return values, regardless of which nested scope within the function the return statement is called from











Defining variables in parameters
We just basically need to create 3 more types for the reference parameters and we only create variables of these types when entering a new function
Expression and Assignment changes
Need to update all expression evaluation to allow for the ref-* type variables
Need to update all assignment functions to allow for the ref-* type variables
Defining variables:
If a variable is in a scope it has been defined, if its not in a scope, it hasn't been defined



Passing values to higher functions
Just use a general propagating function. The moment a value is updated propagate as far a possible






Return values - Now we actually have to return values as well
Function for returning values: 
Call some kind of variant of the propagate function, to proparagate the return values, and then destroy the scope of the function being returned from, NOTE: for scope we go through, we need to add the corresponding result value
To check that return type is same as function return type, just search for the first statement again and check the last word

